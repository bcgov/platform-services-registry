# See https://helm.sh/docs/chart_template_guide/subcharts_and_globals/#global-chart-values
global:
  licencePlate: 101ed4
  vault:
    # licencePlate-nonprod or licencePlate-prod
    role:
    # sub-path of the vault secret
    subPath:
    podAnnotations:
      # See https://developer.hashicorp.com/vault/docs/platform/k8s/injector/annotations#agent-annotations
      vault.hashicorp.com/auth-path: auth/k8s-silver
      vault.hashicorp.com/namespace: platform-services
      vault.hashicorp.com/agent-inject: "true"
      vault.hashicorp.com/agent-inject-token: "false"
      vault.hashicorp.com/agent-pre-populate: "true"
      vault.hashicorp.com/agent-pre-populate-only: "true"
      vault.hashicorp.com/agent-requests-cpu: 50m
      vault.hashicorp.com/agent-limits-cpu: 100m
      vault.hashicorp.com/agent-requests-mem: 32Mi
      vault.hashicorp.com/agent-limits-mem: 64Mi
  env:
    "Env": ""

  serviceAccountName: 101ed4-vault

nameOverride: secdash
fullnameOverride: secdash

dags:
  sha:
  # The following configurations will be populated dynamically by the Makefile
  # based on the DAG filenames in the dag directory.
  volumeMounts: []

# See https://github.com/apache/airflow/blob/main/chart/values.yaml
airflow:
  enabled: true
  route:
    host:

  fullnameOverride: airflow
  nameOverride: airflow
  useStandardNaming: true

  uid:
  gid:

  defaultAirflowRepository: ghcr.io/bcgov/pltsvc-tools-airflow
  # See https://github.com/bcgov/platform-services-registry/pkgs/container/pltsvc-tools-airflow
  defaultAirflowTag: "9bed7f499e4ff864ff0ee1fec5c018e51c115157" # pragma: allowlist secret

  airflowVersion: "3.0.2"

  images:
    useDefaultImageForMigration: false
    migrationsWaitTimeout: 120

  rbac:
    create: true
    createSCCRoleBinding: false

  executor: KubernetesExecutor

  extraEnvFrom: | # pragma: allowlist secret
    - secretRef:
        name: airflow-variables

  data:
    metadataSecretName: secdash-postgresql # pragma: allowlist secret
    # metadataConnection:
    #   user: nonroot
    #   pass: nonroot
    #   protocol: postgresql
    #   host: secdash-postgresql
    #   port: 5432
    #   db: airflow

  webserverSecretKeySecretName: secdash-airflow-webserver # pragma: allowlist secret

  workers:
    extraVolumes:
      - name: secdash-airflow-dags
        persistentVolumeClaim:
          claimName: secdash-airflow-dags
      - name: secdash-airflow-shared
        persistentVolumeClaim:
          claimName: secdash-airflow-shared
    extraVolumeMounts:
      - name: secdash-airflow-dags
        mountPath: /opt/airflow/dags
      - name: secdash-airflow-shared
        mountPath: /opt/airflow/shared

  scheduler:
    replicas: 1
    resources:
      limits:
        cpu: 1
        memory: 1Gi
      requests:
        cpu: 200m
        memory: 200Mi

    extraVolumes:
      - name: secdash-airflow-dags
        persistentVolumeClaim:
          claimName: secdash-airflow-dags
      - name: secdash-airflow-shared
        persistentVolumeClaim:
          claimName: secdash-airflow-shared
    extraVolumeMounts:
      - name: secdash-airflow-dags
        mountPath: /opt/airflow/dags
      - name: secdash-airflow-shared
        mountPath: /opt/airflow/shared

  dagProcessor:
    extraVolumes:
      - name: secdash-airflow-dags
        persistentVolumeClaim:
          claimName: secdash-airflow-dags
      - name: secdash-airflow-shared
        persistentVolumeClaim:
          claimName: secdash-airflow-shared
    extraVolumeMounts:
      - name: secdash-airflow-dags
        mountPath: /opt/airflow/dags
      - name: secdash-airflow-shared
        mountPath: /opt/airflow/shared

  apiserver:
    replicas: 1
    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
      requests:
        cpu: 500m
        memory: 1Gi
    waitForMigrations:
      enabled: true

  webserver:
    replicas: 1
    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
      requests:
        cpu: 500m
        memory: 1Gi
    waitForMigrations:
      enabled: false

  triggerer:
    enabled: false

  statsd:
    enabled: false

  postgresql:
    enabled: false

  config:
    core:
      dag_concurrency: 5
      max_active_runs_per_dag: 1
      min_serialized_dag_update_interval: 10
      min_serialized_dag_fetch_interval: 5
      dags_are_paused_at_creation: False
    logging:
      logging_level: "INFO"
      # See https://airflow.apache.org/docs/apache-airflow-providers-amazon/stable/logging/s3-task-handler.html#writing-logs-to-amazon-s3
      remote_logging: "True"
      # When using the KubernetesExecutor, Airflow runs tasks in isolated pods that donâ€™t have access to the metadata database.
      # Instead, they rely on environment variables for secrets. Since only `EnvironmentVariablesBackend` is available in task pods,
      # connections like `minio` must be set via env vars (e.g., `AIRFLOW_CONN_MINIO`). Without this, the task falls back to anonymous access,
      # causing errors like `NoCredentialsError`. To fix it, add `AIRFLOW_CONN_MINIO` with the value
      # `aws://<access_key>:<secret_key>@/?endpoint_url=http%3A%2F%2Fminio%3A9000&region_name=us-east-1` to the `airflow-variables` secret
      # instead of creating it through the Console UI.
      remote_log_conn_id: "minio"
      remote_base_log_folder: "s3://airflow-logs/dag-logs"
      encrypt_s3_logs: "False"
      colored_console_log: "False"
    webserver:
      web_server_worker_timeout: 300
      workers: 2

    smtp:
      smtp_host: apps.smtp.gov.bc.ca
      smtp_starttls: false
      smtp_mail_from: pltsvc@gov.bc.ca

    scheduler:
      min_file_process_interval: 30

    kubernetes_executor:
      run_as_user: "{{ .Values.uid }}"
      delete_worker_pods: "True"

  dags:
    persistence:
      enabled: false

    gitSync:
      enabled: false

# See https://github.com/bitnami/charts/tree/main/bitnami/postgresql
postgresql:
  enabled: true
  primary:
    podSecurityContext:
      enabled: false
    containerSecurityContext:
      enabled: false
    persistence:
      size: 1Gi
  readReplicas:
    persistence:
      size: 1Gi
  global:
    postgresql:
      auth:
        database: airflow
        username: nonroot
        replicationUsername: replication
        existingSecret: secdash-postgresql # pragma: allowlist secret
        secretKeys:
          adminPasswordKey: admin-password # pragma: allowlist secret
          userPasswordKey: user-password # pragma: allowlist secret
          replicationPasswordKey: replication-password # pragma: allowlist secret

# See https://github.com/SonarSource/helm-chart-sonarqube/blob/87cf0af9db9e573476803b811f95edc7088169f6/charts/sonarqube/values.yaml
sonarqube:
  enabled: false
  route:
    host:

  # See https://github.com/SonarSource/helm-chart-sonarqube/blob/87cf0af9db9e573476803b811f95edc7088169f6/charts/sonarqube/values.yaml#L37
  securityContext:
    fsGroup:

  # See https://github.com/SonarSource/helm-chart-sonarqube/blob/87cf0af9db9e573476803b811f95edc7088169f6/charts/sonarqube/values.yaml#L41C1-L41C25
  containerSecurityContext:
    runAsUser:
    runAsGroup:

  # See https://github.com/SonarSource/helm-chart-sonarqube/blob/87cf0af9db9e573476803b811f95edc7088169f6/charts/sonarqube/values.yaml#L52
  edition: developer

  initContainers:
    securityContext:
      runAsUser:
      runAsGroup:

  # See https://github.com/SonarSource/helm-chart-sonarqube/blob/87cf0af9db9e573476803b811f95edc7088169f6/charts/sonarqube/values.yaml#L236C1-L236C11
  initSysctl:
    enabled: false

  # See https://github.com/SonarSource/helm-chart-sonarqube/blob/8aa02077c479aa2f5d7e205c0e158b8d81938ea1/charts/sonarqube/values.yaml#L366
  resources:
    limits:
      cpu: 800m
      memory: 3Gi
    requests:
      cpu: 400m
      memory: 2Gi

  # See https://github.com/SonarSource/helm-chart-sonarqube/blob/87cf0af9db9e573476803b811f95edc7088169f6/charts/sonarqube/values.yaml#L420C1-L420C14
  jdbcOverwrite:
    enable: true
    jdbcUrl: "jdbc:postgresql://secdash-postgresql/testdb?socketTimeout=1500"
    jdbcUsername: nonroot
    jdbcSecretName: secdash-postgresql # pragma: allowlist secret
    jdbcSecretPasswordKey: user-password # pragma: allowlist secret

  # See https://github.com/SonarSource/helm-chart-sonarqube/blob/87cf0af9db9e573476803b811f95edc7088169f6/charts/sonarqube/values.yaml#L433C3-L433C21
  monitoringPasscode: "secdash-monitoring"

  postgresql:
    enabled: false

minio:
  enabled: false
  replicas: 2

  route:
    host:

  nameOverride: "minio"
  fullnameOverride: "minio"

  persistence:
    enabled: true
    size: 5Gi

  securityContext:
    enabled: false

  resources:
    limits:
      cpu: 300m
      memory: 512Mi
    requests:
      cpu: 150m
      memory: 256Mi

  users:
    - accessKey: minioadmin
      existingSecret: minio-credentials # pragma: allowlist secret
      existingSecretKey: admin-password # pragma: allowlist secret
      policy: consoleAdmin

  buckets:
    []
    #   # Name of the bucket
    # - name: bucket1
    #   # Policy to be set on the
    #   # bucket [none|download|upload|public]
    #   policy: none
    #   # Purge if bucket exists already
    #   purge: false
    #   # set versioning for
    #   # bucket [true|false]
    #   versioning: false # remove this key if you do not want versioning feature
    #   # set objectlocking for
    #   # bucket [true|false] NOTE: versioning is enabled by default if you use locking
    #   objectlocking: false
    # - name: bucket2
    #   policy: none
    #   purge: false
    #   versioning: true
    #   # set objectlocking for
    #   # bucket [true|false] NOTE: versioning is enabled by default if you use locking
    #   objectlocking: false

  ## OpenID Identity Management
  ## The following section documents environment variables for enabling external identity management using an OpenID Connect (OIDC)-compatible provider.
  ## See https://min.io/docs/minio/linux/operations/external-iam/configure-openid-external-identity-management.html for a tutorial on using these variables.
  oidc:
    enabled: false
    configUrl: "https://identity-provider-url/.well-known/openid-configuration"
    clientId: "minio"
    clientSecret: ""
    # Provide existing client secret from the Kubernetes Secret resource, existing secret will have priority over `clientId` and/or `clientSecret``
    existingClientSecretName: ""
    existingClientIdKey: ""
    existingClientSecretKey: ""
    claimName: "policy"
    scopes: "openid,profile,email"
    redirectUri: "https://console-endpoint-url/oauth_callback"
    # Can leave empty
    claimPrefix: ""
    comment: ""
    displayName: ""

mongodb:
  enabled: false

  nameOverride: tools-mongodb
  fullnameOverride: tools-mongodb

  architecture: standalone
  useStatefulSet: false
  replicaCount: 1

  auth:
    enabled: true
    existingSecret: tools-mongodb # pragma: allowlist secret

  persistence:
    enabled: true
    storageClass: netapp-block-standard
    size: 3Gi

  resources:
    requests:
      cpu: 0.5
      memory: 500Mi

  podSecurityContext:
    enabled: false
  containerSecurityContext:
    enabled: false

  arbiter:
    enabled: false
    podSecurityContext:
      enabled: false
    containerSecurityContext:
      enabled: false

sorrycypress:
  enabled: false

  fullnameOverride: sorry-cypress

  routes:
    api:
      host:
    dashboard:
      host:
    director:
      host:

  mongodb:
    mongoSecretConnectionString:
      enableSecret: false
      enableCustomSecret: true
      secretName: tools-mongodb # pragma: allowlist secret
      secretKey: sorry-cypress-connection-string # pragma: allowlist secret

    internal_db:
      enabled: false

    external_db:
      enabled: true

  api:
    ingress:
      enabled: false
  dashboard:
    ingress:
      enabled: false
    environmentVariables:
      graphQlClientCredentials: ""
      graphQlSchemaUrl: http://sorry-cypress-api:4000
      ciUrl: ""
      basePath: "/"
  director:
    ingress:
      enabled: false
    extraEnv:
      - name: PM2_HOME
        value: /tmp/.pm2
