// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                                                 String                         @id @default(auto()) @map("_id") @db.ObjectId
  firstName                                          String?
  lastName                                           String?
  email                                              String                         @unique
  upn                                                String?
  idir                                               String?
  image                                              String?
  ministry                                           String?
  archived                                           Boolean                        @default(false)
  created                                            DateTime                       @default(now())
  lastSeen                                           DateTime                       @updatedAt
  privateCloudProjectOwner                           PrivateCloudProject[]          @relation("privateCloudProjectOwner")
  privateCloudProjectPrimaryTechnicalLead            PrivateCloudProject[]          @relation("privateCloudPrimaryTechnicalLead")
  privateCloudProjectSecondaryTechnicalLead          PrivateCloudProject[]          @relation("privateCloudSecondaryTechnicalLead")
  privateCloudRequestedProjectOwner                  PrivateCloudRequestedProject[] @relation("privateCloudRequestedProjectOwner")
  privateCloudRequestedProjectPrimaryTechnicalLead   PrivateCloudRequestedProject[] @relation("privateCloudRequestedPrimaryTechnicalLead")
  privateCloudRequestedProjectSecondaryTechnicalLead PrivateCloudRequestedProject[] @relation("privateCloudRequestedSecondaryTechnicalLead")

  publicCloudProjectOwner                           PublicCloudProject[]          @relation("publicCloudProjectOwner")
  publicCloudProjectPrimaryTechnicalLead            PublicCloudProject[]          @relation("publicCloudPrimaryTechnicalLead")
  publicCloudProjectSecondaryTechnicalLead          PublicCloudProject[]          @relation("publicCloudSecondaryTechnicalLead")
  publicCloudRequestedProjectOwner                  PublicCloudRequestedProject[] @relation("publicCloudRequestedProjectOwner")
  publicCloudRequestedProjectPrimaryTechnicalLead   PublicCloudRequestedProject[] @relation("publicCloudRequestedPrimaryTechnicalLead")
  publicCloudRequestedProjectSecondaryTechnicalLead PublicCloudRequestedProject[] @relation("publicCloudRequestedSecondaryTechnicalLead")
}

model PrivateCloudRequest {
  id                     String                        @id @default(auto()) @map("_id") @db.ObjectId
  licencePlate           String
  createdByEmail         String
  decisionMakerEmail     String?
  type                   RequestType
  decisionStatus         DecisionStatus
  isQuotaChanged         Boolean?                      @default(false)
  requestComment         String?
  decisionComment        String?
  active                 Boolean                       @default(true)
  created                DateTime                      @default(now())
  updatedAt              DateTime                      @updatedAt
  decisionDate           DateTime?
  projectId              String?                       @db.ObjectId
  project                PrivateCloudProject?          @relation("privateCloudProject", fields: [projectId], references: [id], onDelete: Cascade)
  requestedProjectId     String                        @unique @db.ObjectId
  requestedProject       PrivateCloudRequestedProject  @relation("privateCloudRequestedProject", fields: [requestedProjectId], references: [id], onDelete: Cascade)
  userRequestedProjectId String                        @unique @db.ObjectId
  userRequestedProject   PrivateCloudRequestedProject? @relation("privateCloudUserRequestedProject", fields: [userRequestedProjectId], references: [id], onDelete: Cascade)
}

model PrivateCloudProject {
  id                       String                @id @default(auto()) @map("_id") @db.ObjectId
  licencePlate             String                @unique
  name                     String
  description              String
  status                   ProjectStatus
  created                  DateTime              @default(now())
  updatedAt                DateTime              @updatedAt
  projectOwnerId           String                @db.ObjectId
  projectOwner             User                  @relation("privateCloudProjectOwner", fields: [projectOwnerId], references: [id], onDelete: Cascade)
  primaryTechnicalLeadId   String                @db.ObjectId
  primaryTechnicalLead     User                  @relation("privateCloudPrimaryTechnicalLead", fields: [primaryTechnicalLeadId], references: [id], onDelete: Cascade)
  secondaryTechnicalLeadId String?               @db.ObjectId
  secondaryTechnicalLead   User?                 @relation("privateCloudSecondaryTechnicalLead", fields: [secondaryTechnicalLeadId], references: [id], onDelete: Cascade)
  ministry                 Ministry
  cluster                  Cluster
  productionQuota          Quota
  testQuota                Quota
  developmentQuota         Quota
  toolsQuota               Quota
  commonComponents         CommonComponents
  requests                 PrivateCloudRequest[] @relation("privateCloudProject")
}

model PrivateCloudRequestedProject {
  id                       String               @id @default(auto()) @map("_id") @db.ObjectId
  name                     String
  description              String
  status                   ProjectStatus
  licencePlate             String
  created                  DateTime             @default(now())
  projectOwnerId           String               @db.ObjectId
  projectOwner             User                 @relation("privateCloudRequestedProjectOwner", fields: [projectOwnerId], references: [id], onDelete: Cascade)
  primaryTechnicalLeadId   String               @db.ObjectId
  primaryTechnicalLead     User                 @relation("privateCloudRequestedPrimaryTechnicalLead", fields: [primaryTechnicalLeadId], references: [id], onDelete: Cascade)
  secondaryTechnicalLeadId String?              @db.ObjectId
  secondaryTechnicalLead   User?                @relation("privateCloudRequestedSecondaryTechnicalLead", fields: [secondaryTechnicalLeadId], references: [id], onDelete: Cascade)
  ministry                 Ministry
  cluster                  Cluster
  productionQuota          Quota
  testQuota                Quota
  developmentQuota         Quota
  toolsQuota               Quota
  commonComponents         CommonComponents
  requestedProject         PrivateCloudRequest? @relation("privateCloudRequestedProject")
  userRequestedProject     PrivateCloudRequest? @relation("privateCloudUserRequestedProject")
}

model PublicCloudRequest {
  id                     String                       @id @default(auto()) @map("_id") @db.ObjectId
  licencePlate           String
  createdByEmail         String
  decisionMakerEmail     String?
  type                   PublicCloudRequestType
  decisionStatus         DecisionStatus
  requestComment         String?
  decisionComment        String?
  active                 Boolean                      @default(true)
  created                DateTime                     @default(now())
  updatedAt              DateTime                     @updatedAt
  decisionDate           DateTime?
  projectId              String?                      @db.ObjectId
  project                PublicCloudProject?          @relation("publicCloudProject", fields: [projectId], references: [id], onDelete: Cascade)
  requestedProjectId     String                       @unique @db.ObjectId
  requestedProject       PublicCloudRequestedProject  @relation("publicCloudRequestedProject", fields: [requestedProjectId], references: [id], onDelete: Cascade)
  userRequestedProjectId String                       @unique @db.ObjectId
  userRequestedProject   PublicCloudRequestedProject? @relation("publicCloudUserRequestedProject", fields: [userRequestedProjectId], references: [id], onDelete: Cascade)
}

model PublicCloudProject {
  id                       String               @id @default(auto()) @map("_id") @db.ObjectId
  licencePlate             String               @unique
  name                     String
  description              String
  status                   ProjectStatus
  created                  DateTime             @default(now())
  updatedAt                DateTime             @updatedAt
  accountCoding            String
  budget                   Budget
  projectOwnerId           String               @db.ObjectId
  projectOwner             User                 @relation("publicCloudProjectOwner", fields: [projectOwnerId], references: [id], onDelete: Cascade)
  primaryTechnicalLeadId   String               @db.ObjectId
  primaryTechnicalLead     User                 @relation("publicCloudPrimaryTechnicalLead", fields: [primaryTechnicalLeadId], references: [id], onDelete: Cascade)
  secondaryTechnicalLeadId String?              @db.ObjectId
  secondaryTechnicalLead   User?                @relation("publicCloudSecondaryTechnicalLead", fields: [secondaryTechnicalLeadId], references: [id], onDelete: Cascade)
  ministry                 Ministry
  provider                 Provider
  requests                 PublicCloudRequest[] @relation("publicCloudProject")
}

model PublicCloudRequestedProject {
  id                       String              @id @default(auto()) @map("_id") @db.ObjectId
  licencePlate             String
  name                     String
  description              String
  status                   ProjectStatus
  created                  DateTime            @default(now())
  accountCoding            String
  budget                   Budget
  projectOwnerId           String              @db.ObjectId
  projectOwner             User                @relation("publicCloudRequestedProjectOwner", fields: [projectOwnerId], references: [id], onDelete: Cascade)
  primaryTechnicalLeadId   String              @db.ObjectId
  primaryTechnicalLead     User                @relation("publicCloudRequestedPrimaryTechnicalLead", fields: [primaryTechnicalLeadId], references: [id], onDelete: Cascade)
  secondaryTechnicalLeadId String?             @db.ObjectId
  secondaryTechnicalLead   User?               @relation("publicCloudRequestedSecondaryTechnicalLead", fields: [secondaryTechnicalLeadId], references: [id], onDelete: Cascade)
  ministry                 Ministry
  provider                 Provider
  requestedProject         PublicCloudRequest? @relation("publicCloudRequestedProject")
  userRequestedProject     PublicCloudRequest? @relation("publicCloudUserRequestedProject")
}

model PrivateCloudProjectZapResult {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  licencePlate String
  cluster      String
  host         String
  html         String?
  json         ZapJson?
  available    Boolean?
  scannedAt    DateTime @default(now())
}

type ZapJson {
  site ZapJsonSite[]
}

type ZapJsonSite {
  alerts ZapJsonSiteAlert[]
}

type ZapJsonSiteAlert {
  pluginid   String
  alertRef   String
  alert      String
  name       String
  riskcode   String
  confidence String
  riskdesc   String
  desc       String
  count      String
  solution   String
  otherinfo  String
  reference  String
  cweid      String
  wascid     String
  sourceid   String
}

model SecurityConfig {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  context           ProjectContext
  clusterOrProvider String?
  licencePlate      String         @unique
  repositories      Repository[]
}

enum ProjectContext {
  PRIVATE
  PUBLIC
}

type Repository {
  url String
}

model SonarScanResult {
  id                String                @id @default(auto()) @map("_id") @db.ObjectId
  context           ProjectContext
  clusterOrProvider String?
  licencePlate      String
  url               String
  sha               String
  source            String
  result            SonarScanResultDetail
  scannedAt         DateTime              @default(now())
}

type SonarScanResultDetail {
  repoid                   String
  last_date                String
  bugs                     String
  vulnerabilities          String
  sqale_index              String
  duplicated_lines_density String
  ncloc                    String
  coverage                 String
  code_smells              String
  reliability_rating       String
  security_rating          String
  sqale_rating             String
}

model AcsResult {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  licencePlate String           @unique
  cluster      String
  alerts       AcsResultAlert[]
  images       AcsResultImage[]
  violationUrl String
  imageUrl     String
  scannedAt    DateTime         @default(now())
}

type AcsResultAlert {
  id                String
  lifecycleStage    String
  time              String
  state             String
  enforcementCount  Int
  enforcementAction String
  policy            AcsResultAlertPolicy?
  commonEntityInfo  AcsResultAlertCommonEntityInfo?
  deployment        AcsResultAlertDeployment?
}

type AcsResultAlertPolicy {
  id          String
  name        String
  severity    String
  description String
  categories  String[]
}

type AcsResultAlertCommonEntityInfo {
  clusterId    String
  clusterName  String
  namespaceId  String
  namespace    String
  resourceType String
}

type AcsResultAlertDeployment {
  id          String
  name        String
  clusterId   String
  clusterName String
  namespaceId String
  namespace   String
  inactive    Boolean
}

type AcsResultImage {
  id          String
  name        String
  components  Int?
  cves        Int?
  fixableCves Int?
  created     String?
  lastUpdated String
  priority    String
}

type Quota {
  cpu     String
  memory  String
  storage String
}

type Budget {
  dev   Float
  test  Float
  prod  Float
  tools Float
}

type CommonComponentsOptions {
  planningToUse Boolean
  implemented   Boolean
}

type CommonComponents {
  addressAndGeolocation              CommonComponentsOptions
  workflowManagement                 CommonComponentsOptions
  formDesignAndSubmission            CommonComponentsOptions
  identityManagement                 CommonComponentsOptions
  paymentServices                    CommonComponentsOptions
  documentManagement                 CommonComponentsOptions
  endUserNotificationAndSubscription CommonComponentsOptions
  publishing                         CommonComponentsOptions
  businessIntelligence               CommonComponentsOptions
  other                              String
  noServices                         Boolean
}

enum ProjectStatus {
  ACTIVE
  INACTIVE
}

enum DecisionStatus {
  PENDING
  APPROVED
  REJECTED
  PROVISIONED
}

enum RequestType {
  CREATE
  EDIT
  DELETE
}

enum PublicCloudRequestType {
  CREATE
  EDIT
  DELETE
}

enum Ministry {
  AEST
  AG
  AGRI
  ALC
  BCPC
  CITZ
  DBC
  EAO
  EDUC
  EMBC
  EMPR
  ENV
  FIN
  FLNR
  HLTH
  HOUS
  IRR
  JEDC
  LBR
  LDB
  MAH
  MCF
  MMHA
  PSA
  PSSG
  SDPR
  TCA
  TRAN
}

enum Cluster {
  CLAB
  KLAB
  SILVER
  GOLD
  GOLDDR
  KLAB2
  EMERALD
}

enum Provider {
  // GOOGLE
  AWS
}
