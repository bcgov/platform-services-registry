name: DEV Build and Tag - WEB

on:
  # Run the workflow manually, instead of on a push.
  # The user specifies the name of the build config to use, which should be a
  #   web app build config.
  # -------------------------------------------------------------------------
  workflow_dispatch:
    inputs:
      buildConfig:
        description: 'Enter build config name:'
        required: true
        default: platsrv-registry-web-dev-build
  
defaults:
  run:
    working-directory: ./web

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master

      - uses: actions/setup-node@master
        with:
          node-version: "12"

      - name: Install dependencies
        run: npm ci

      - name: Unit tests w/ coverage
        run: npm run test -- --coverage --passWithNoTests

      - name: LINTing
        run: npm run lint -- --quiet -f codeframe

      - name: Prettier
        run: npm run format -- --check

  build:
    runs-on: ubuntu-latest
    needs: [test]
    strategy:
      matrix:
        node-version: [10.x, 12.x]
    steps:
      - uses: actions/checkout@v1

      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-

      - name: npm install and build
        run: |
          npm ci
          npm run build --if-present
        env:
          CI: "true"

      - name: Check build result
        if: ${{ failure() }}
        run: echo "Error in build step"; exit 1

      - name: Run Cypress tests
        uses: cypress-io/github-action@v2
        with:
          start: npm start
          wait-on: 'http://localhost:3000'
          wait-on-timeout: 30
          build: npm i -D cypress
          headless: true
          working-directory: ./web

      - name: Save Cypress video files
        uses: actions/upload-artifact@v2
        with:
          name: cypress-videos
          path: web/cypress/videos

      - name: Save Cypress screenshots on failure
        #if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: cypress-screenshots
          path: web/cypress/screenshots

      - name: Check Cypress test result
        if: ${{ failure() }}
        env:
          ROCKETCHAT_MESSAGE: "There was an error in the Cypress test(s) for the registry app during the ${{ github.workflow }} workflow.  View the output and download test output files at https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        run: |
          curl -X POST -H 'Content-Type: application/json' --data '{"text":"${{ env.ROCKETCHAT_MESSAGE }}"}' "${{ secrets.ROCKETCHAT_HOOK_URL }}"
          exit 1

  s2i-build:
    runs-on: ubuntu-latest
    needs: [test, build]
    concurrency: platsrv-registry-web
    defaults:
      run:
        working-directory: .
    steps:

      # Build the image using the specified build config
      # Get its build ID
      # Get the commit ID of that build
      # Get the SHA256 signature of the image
      # Tag the image with the commit ID and "dev"
      # ------------------------------------------------
      - name: Build and tag the image
        id: build-image
        run: |
          oc version
          oc login --token=${{ secrets.OpenShiftToken }} --server=${{ secrets.OpenShiftServerURL }}
          oc -n platform-registry-tools start-build ${{ github.event.inputs.buildConfig }} --follow
          export BUILDID="$(oc -n platform-registry-tools get -o=jsonpath="{.status.lastVersion}" buildconfig ${{ github.event.inputs.buildConfig }})"
          export COMMITID="$(oc -n platform-registry-tools get -o=jsonpath="{.spec.revision.git.commit}" build ${{ github.event.inputs.buildConfig }}-$BUILDID | cut -c1-7)"
          export IMAGESHA="$(oc -n platform-registry-tools get -o=jsonpath="{.status.output.to.imageDigest}" build ${{ github.event.inputs.buildConfig }}-$BUILDID)"
          oc -n platform-registry-tools tag platsrv-registry-web@$IMAGESHA platsrv-registry-web:$COMMITID platsrv-registry-web:dev
          echo "::set-output name=imagesha::$IMAGESHA"

      # Update the image ID in the manifest repository used by Argo CD.
      # ---------------------------------------------------------------
      - name: Prepare deploy key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.MANIFEST_REPO_DEPLOY_KEY }}

      - name: Check out manifest repo
        uses: actions/checkout@v2
        with:
          ssh-key: ${{ secrets.MANIFEST_REPO_DEPLOY_KEY }}
          repository: ${{ secrets.MANIFEST_REPO }}

      - name: Set up Kustomize
        uses: imranismail/setup-kustomize@v1

      - name: Update image ID and commit change
        if: ${{ success() }}
        run: |
          cd platform-registry-app/overlays/dev
          kustomize edit set image "registry-web-image=image-registry.openshift-image-registry.svc:5000/platform-registry-tools/platsrv-registry-web@${{ steps.build-image.outputs.imagesha }}"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git commit -am "Update web image ID for Dev"
          git push origin

