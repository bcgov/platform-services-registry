name: DEV Build and Tag - WEB

on:
  # Run the workflow manually, instead of on a push.
  # The user specifies the name of the build config to use, which should be a
  #   web app build config.
  # -------------------------------------------------------------------------
  workflow_dispatch:
    inputs:
      buildConfig:
        description: 'Enter build config name:'
        required: true
        default: platsrv-registry-web-dev-build
  
defaults:
  run:
    working-directory: ./web

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - uses: actions/setup-node@master
        with:
          node-version: "12"
      - name: Install dependencies
        run: npm ci
      - name: Unit tests w/ coverage
        run: npm run test -- --coverage --passWithNoTests
      - name: LINTing
        run: npm run lint -- --quiet -f codeframe
      - name: Prettier
        run: npm run format -- --check
      # - name: Upload coverage report
      #   env:
      #     CC_TEST_REPORTER_ID: ${{ secrets.TestReporterID }}
      #     CI: "true"
      #   run: |
      #     curl -Ls https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
      #     chmod +x ./cc-test-reporter
      #     ./cc-test-reporter format-coverage -t lcov -o codeclimate.json
      #     ./cc-test-reporter upload-coverage -i codeclimate.json
  build:
    runs-on: ubuntu-latest
    needs: [test]
    strategy:
      matrix:
        node-version: [10.x, 12.x]
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-build-${{ env.cache-name }}-
            ${{ runner.OS }}-build-
            ${{ runner.OS }}-
      - name: npm install and build
        run: |
          npm ci
          npm run build --if-present
        env:
          CI: "true"
      - name: Cypress test
        uses: cypress-io/github-action@v2
        with:
          build: npm i -D cypress
          headless: true
          working-directory: ./web
      - name: List Cypress video directory
        run: ls -lR .
  s2i-build:
    runs-on: ubuntu-latest
    needs: [test, build]
    defaults:
      run:
        working-directory: .
    steps:

      # Build the image using the specified build config
      # Get its build ID
      # Get the commit ID of that build
      # Get the SHA256 signature of the image
      # Tag the image with the commit ID and "dev"
      # ------------------------------------------------
      - name: Build and tag the image
        run: |
          oc version
          oc login --token=${{ secrets.OpenShiftToken }} --server=${{ secrets.OpenShiftServerURL }}
          oc -n platform-registry-tools start-build ${{ github.event.inputs.buildConfig }} --follow
          export BUILDID="$(oc -n platform-registry-tools get -o=jsonpath="{.status.lastVersion}" buildconfig ${{ github.event.inputs.buildConfig }})"
          export COMMITID="$(oc -n platform-registry-tools get -o=jsonpath="{.spec.revision.git.commit}" build ${{ github.event.inputs.buildConfig }}-$BUILDID | cut -c1-7)"
          export IMAGESHA="$(oc -n platform-registry-tools get -o=jsonpath="{.status.output.to.imageDigest}" build ${{ github.event.inputs.buildConfig }}-$BUILDID)"
          oc -n platform-registry-tools tag platsrv-registry-web@$IMAGESHA platsrv-registry-web:$COMMITID platsrv-registry-web:dev

