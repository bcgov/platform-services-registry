import { createColumnHelper, flexRender, getCoreRowModel, useReactTable } from '@tanstack/react-table';
import { useState } from 'react';
import z from 'zod';

export default function GenericTable({
  tableProps,
}: {
  tableProps: {
    tableColumns: string[];
    tableData: { [key: symbol]: symbol }[];
    tableDataSchema: z.AnyZodObject;
    pageSize: number;
  };
}) {
  type TableDataInterface = z.infer<typeof tableProps.tableDataSchema>;

  const columnHelper = createColumnHelper<TableDataInterface>();
  const getAutoGeneratedColumns = () => {
    const dataKeys: (keyof TableDataInterface)[] = tableProps.tableColumns;

    return dataKeys.map((key) => {
      const baseColumn = {
        id: key as string,
        accessor: key,
        header: key.toString(),
        cell: (info: any) => info.getValue(),
      };
      return baseColumn;
    });
  };

  const columns = getAutoGeneratedColumns().map((col) =>
    columnHelper.accessor(col.accessor as string, {
      id: col.id,
      header: ({ column }) => (
        <div
          className="flex items-center cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700 p-1 rounded"
          onClick={() => column.toggleSorting()}
        >
          {col.header}
        </div>
      ),
      cell: col.cell,
    }),
  );

  const [data, _setData] = useState(() => [...tableProps.tableData]);

  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
  });

  return (
    <table className="w-full mb-8 text-sm border-collapse">
      <thead>
        {table.getHeaderGroups().map((headerGroup) => (
          <tr key={headerGroup.id} className="bg-gray-100 dark:bg-gray-800">
            {headerGroup.headers.map((header) => (
              <th className="text-left p-2 border-b" key={header.id}>
                {flexRender(header.column.columnDef.header, header.getContext())}
              </th>
            ))}
          </tr>
        ))}
      </thead>
      <tbody>
        {table.getRowModel().rows.map((row, idx: number) => (
          <tr key={idx} className={idx % 2 === 0 ? 'bg-white dark:bg-gray-900' : 'bg-gray-50 dark:bg-gray-800'}>
            {row.getVisibleCells().map((cell) => (
              <td key={cell.id} className="p-2 border-b align-top">
                {flexRender(cell.column.columnDef.cell, cell.getContext())}
              </td>
            ))}
          </tr>
        ))}
      </tbody>
    </table>
  );
}
