import { CellContext, createColumnHelper, flexRender, getCoreRowModel, useReactTable } from '@tanstack/react-table';
import _startCase from 'lodash-es/startCase';
import { useMemo } from 'react';

interface ColumnDefinition {
  label: string;
  value: string;
}

interface TableProps<T extends Record<symbol, symbol>> {
  columns?: ColumnDefinition[];
  data: T[];
  defaultPageSize?: number;
}

export default function GenericTable<T extends Record<symbol, symbol>>({
  columns,
  data,
  defaultPageSize = 10,
}: TableProps<T>) {
  const columnHelper = createColumnHelper<T>();

  const updatedColumns = (columns || (data.length > 0 ? Object.keys(data[0]) : [])).map((col) => ({
    label: _startCase(col),
    value: col,
  }));

  const getAutoGeneratedColumns = <T,>(cols: ColumnDefinition[]) => {
    return cols.map((key) => ({
      id: key.value,
      accessor: key.value,
      header: key.label,
      cell: (info: CellContext<T, T[keyof T]>) => {
        // TODO some cell processing
        return info.getValue();
      },
    }));
  };

  const renderedColumns = useMemo(() => {
    return getAutoGeneratedColumns<T>(updatedColumns).map((col) =>
      columnHelper.accessor((row) => row[col.accessor as keyof T], {
        id: col.id,
        header: ({ column }) => (
          <div className="flex items-center cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700 p-1 rounded">
            {col.header}
          </div>
        ),
        cell: col.cell,
      }),
    );
  }, [columnHelper, updatedColumns]);

  const table = useReactTable({
    data,
    columns: renderedColumns,
    getCoreRowModel: getCoreRowModel(),
  });

  return (
    <table className="w-full mb-8 text-sm border-collapse">
      <thead>
        {table.getHeaderGroups().map((headerGroup) => (
          <tr key={headerGroup.id} className="bg-gray-100 dark:bg-gray-800">
            {headerGroup.headers.map((header) => (
              <th className="text-left p-2 border-b" key={header.id}>
                {flexRender(header.column.columnDef.header, header.getContext())}
              </th>
            ))}
          </tr>
        ))}
      </thead>
      <tbody>
        {table.getRowModel().rows.map((row, idx: number) => (
          <tr key={idx} className="bg-white dark:bg-gray-900 even:bg-gray-50 odd:dark:bg-gray-800">
            {row.getVisibleCells().map((cell) => (
              <td key={cell.id} className="p-2 border-b align-top">
                {flexRender(cell.column.columnDef.cell, cell.getContext())}
              </td>
            ))}
          </tr>
        ))}
      </tbody>
    </table>
  );
}
