import { Button } from '@mantine/core';
import {
  IconArrowDown,
  IconArrowUp,
  IconChevronLeft,
  IconChevronRight,
  IconChevronsLeft,
  IconChevronsRight,
} from '@tabler/icons-react';
import {
  CellContext,
  createColumnHelper,
  flexRender,
  getCoreRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  SortingState,
  useReactTable,
} from '@tanstack/react-table';
import _startCase from 'lodash-es/startCase';
import { useMemo, useState } from 'react';
import { generatePageSizes } from '@/helpers/pagination';

interface ColumnDefinition<TData> {
  label: string;
  value: string;
  cellProcessor?: (item: TData) => React.ReactNode;
}

interface TableProps<TData> {
  columns?: ColumnDefinition<TData>[];
  data: TData[];
  defaultPageSize?: number;
}

export default function DataTable<TData extends object>({ columns, data, defaultPageSize = 10 }: TableProps<TData>) {
  const columnHelper = createColumnHelper<TData>();

  const updatedColumns = useMemo(() => {
    if (columns) {
      return columns;
    }

    return data.length > 0
      ? Object.keys(data[0]).map((key) => ({
          label: _startCase(key),
          value: key,
        }))
      : [];
  }, [columns, data]);

  const getAutoGeneratedColumns = <TData,>(cols: ColumnDefinition<TData>[]) => {
    return cols.map((col) => {
      return {
        id: col.value,
        accessor: col.value,
        header: col.label,
        cell: (info: CellContext<TData, any>) => {
          const item = info.row.original;

          return <>{col.cellProcessor ? col.cellProcessor(item) : String(info.getValue())}</>;
        },
      };
    });
  };

  const renderedColumns = useMemo(() => {
    return getAutoGeneratedColumns<TData>(updatedColumns).map((col) =>
      columnHelper.accessor((row) => row[col.id], {
        id: col.id,
        header: ({ column }) => (
          <div
            className="flex items-center cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700 p-1 rounded"
            onClick={() => column.toggleSorting()}
          >
            {col.header}
            <div className="ml-2 flex flex-col items-center justify-center h-5 w-5">
              {column.getIsSorted() === 'asc' ? (
                <IconArrowUp className="h-5 w-5 stroke-2 text-black dark:text-black" />
              ) : column.getIsSorted() === 'desc' ? (
                <IconArrowDown className="h-5 w-5 stroke-2 text-black dark:text-black" />
              ) : (
                <div className="relative h-full w-full">
                  <IconArrowUp className="absolute top-[-2px] h-4 w-4 stroke-1.5 text-gray-300 dark:text-gray-300" />
                  <IconArrowDown className="absolute bottom-[-2px] h-4 w-4 stroke-1.5 text-gray-300 dark:text-gray-300" />
                </div>
              )}
            </div>
          </div>
        ),
        cell: col.cell,
      }),
    );
  }, [columnHelper, updatedColumns]);

  const [pagination, setPagination] = useState({
    pageIndex: 0,
    pageSize: defaultPageSize,
  });
  const [sorting, setSorting] = useState<SortingState>([]);

  const table = useReactTable({
    data,
    columns: renderedColumns,
    state: {
      pagination,
      sorting,
    },
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    onPaginationChange: setPagination,
    onSortingChange: setSorting,
  });

  return (
    <>
      <table className="w-full mb-8 text-sm border-collapse">
        <thead>
          {table.getHeaderGroups().map((headerGroup) => (
            <tr key={headerGroup.id} className="bg-gray-100 dark:bg-gray-800">
              {headerGroup.headers.map((header) => (
                <th className="text-left p-2 border-b" key={header.id}>
                  {flexRender(header.column.columnDef.header, header.getContext())}
                </th>
              ))}
            </tr>
          ))}
        </thead>
        <tbody>
          {table.getRowModel().rows.map((row) => (
            <tr key={row.id} className="bg-white dark:bg-gray-900 even:bg-gray-50 odd:dark:bg-gray-800">
              {row.getVisibleCells().map((cell) => (
                <td key={cell.id} className="p-2 border-b align-top">
                  {flexRender(cell.column.columnDef.cell, cell.getContext())}
                </td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
      <div className="flex items-center justify-between mt-4">
        <div className="flex items-center gap-2">
          <Button
            variant="outline"
            size="sm"
            color="gray"
            onClick={() => table.setPageIndex(0)}
            disabled={!table.getCanPreviousPage()}
            p="xs"
          >
            <IconChevronsLeft size={20} />
          </Button>
          <Button
            variant="outline"
            size="sm"
            color="gray"
            onClick={() => table.previousPage()}
            disabled={!table.getCanPreviousPage()}
            p="xs"
          >
            <IconChevronLeft size={20} />
          </Button>
          <Button
            variant="outline"
            size="sm"
            color="gray"
            onClick={() => table.nextPage()}
            disabled={!table.getCanNextPage()}
            p="xs"
          >
            <IconChevronRight size={20} />
          </Button>
          <Button
            variant="outline"
            size="sm"
            color="gray"
            onClick={() => table.setPageIndex(table.getPageCount() - 1)}
            disabled={!table.getCanNextPage()}
            p="xs"
          >
            <IconChevronsRight size={20} />
          </Button>
        </div>
        <span className="flex items-center gap-1">
          <div>Page</div>
          <strong>
            {table.getState().pagination.pageIndex + 1} of {table.getPageCount()}
          </strong>
        </span>

        <div className="flex items-center gap-2">
          <select
            value={table.getState().pagination.pageSize}
            onChange={(e) => {
              table.setPageSize(Number(e.target.value));
            }}
            className="px-2 py-1 border rounded min-w-20"
          >
            {generatePageSizes(defaultPageSize).map((pageSize) => (
              <option key={pageSize} value={pageSize} className="min-w-[100px]">
                {pageSize}
              </option>
            ))}
          </select>
        </div>
      </div>
    </>
  );
}
