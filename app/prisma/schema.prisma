// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-3.0.x"]
  output        = "./client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                                                    String                    @id @default(auto()) @map("_id") @db.ObjectId
  providerUserId                                        String?
  firstName                                             String?
  lastName                                              String?
  email                                                 String                    @unique
  upn                                                   String?
  idir                                                  String?
  idirGuid                                              String?
  officeLocation                                        String?
  jobTitle                                              String?
  image                                                 String?
  ministry                                              String?
  archived                                              Boolean                   @default(false)
  createdAt                                             DateTime                  @default(now())
  updatedAt                                             DateTime                  @updatedAt
  lastSeen                                              DateTime?
  onboardingDate                                        DateTime?
  privateCloudProjectsAsProjectOwner                    PrivateCloudProduct[]     @relation("projectOwner")
  privateCloudProjectsAsPrimaryTechnicalLead            PrivateCloudProduct[]     @relation("primaryTechnicalLead")
  privateCloudProjectsAsSecondaryTechnicalLead          PrivateCloudProduct[]     @relation("secondaryTechnicalLead")
  privateCloudRequestedProjectsAsProjectOwner           PrivateCloudRequestData[] @relation("projectOwner")
  privateCloudRequestedProjectsAsPrimaryTechnicalLead   PrivateCloudRequestData[] @relation("primaryTechnicalLead")
  privateCloudRequestedProjectsAsSecondaryTechnicalLead PrivateCloudRequestData[] @relation("secondaryTechnicalLead")
  publicCloudProjectsAsProjectOwner                     PublicCloudProduct[]      @relation("projectOwner")
  publicCloudProjectsAsPrimaryTechnicalLead             PublicCloudProduct[]      @relation("primaryTechnicalLead")
  publicCloudProjectsAsSecondaryTechnicalLead           PublicCloudProduct[]      @relation("secondaryTechnicalLead")
  publicCloudProjectsAsExpenseAuthority                 PublicCloudProduct[]      @relation("expenseAuthority")
  publicCloudRequestedProjectsAsProjectOwner            PublicCloudRequestData[]  @relation("projectOwner")
  publicCloudRequestedProjectsAsPrimaryTechnicalLead    PublicCloudRequestData[]  @relation("primaryTechnicalLead")
  publicCloudRequestedProjectsAsSecondaryTechnicalLead  PublicCloudRequestData[]  @relation("secondaryTechnicalLead")
  publicCloudRequestedProjectsAsExpenseAuthority        PublicCloudRequestData[]  @relation("expenseAuthority")
  privateCloudComments                                  PrivateCloudComment[]     @relation("user")
  reactions                                             Reaction[]                @relation("user")
  publicCloudBillingSigned                              PublicCloudBilling[]      @relation("signedBy")
  publicCloudBillingApproved                            PublicCloudBilling[]      @relation("approvedBy")
  publicCloudBillingAsExpenseAuthority                  PublicCloudBilling[]      @relation("expenseAuthority")
  privateCloudRequestsAsRequester                       PrivateCloudRequest[]     @relation("createdBy")
  publicCloudRequestsAsRequester                        PublicCloudRequest[]      @relation("createdBy")
  privateCloudRequestsAsDecisionMaker                   PrivateCloudRequest[]     @relation("decisionMaker")
  publicCloudRequestsAsDecisionMaker                    PublicCloudRequest[]      @relation("decisionMaker")
  events                                                Event[]                   @relation("UserToEvents")
  tasks                                                 Task[]                    @relation("UserToTasks")
  tasksStarted                                          Task[]                    @relation("AssigneeToTasks")
  privateCloudRequestsAsCanceler                        PrivateCloudRequest[]     @relation("cancelledBy")
  publicCloudRequestsAsCanceler                         PublicCloudRequest[]      @relation("cancelledBy")
}

model UserSession {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  email                String   @unique
  nextTokenRefreshTime DateTime
  accessToken          String
  refreshToken         String
  idToken              String
  sub                  String
  roles                String[]
  teams                Team[]
}

type Team {
  clientId String
  roles    String[]
}

model PrivateCloudRequest {
  id                             String                          @id @default(auto()) @map("_id") @db.ObjectId
  licencePlate                   String
  createdById                    String?                         @db.ObjectId
  createdBy                      User?                           @relation("createdBy", fields: [createdById], references: [id])
  decisionMakerId                String?                         @db.ObjectId
  decisionMaker                  User?                           @relation("decisionMaker", fields: [decisionMakerId], references: [id])
  quotaContactName               String?
  quotaContactEmail              String?
  quotaJustification             String?
  type                           RequestType
  decisionStatus                 DecisionStatus
  actioned                       Boolean?                        @default(false)
  isQuotaChanged                 Boolean?                        @default(false)
  requestComment                 String?
  decisionComment                String?
  active                         Boolean                         @default(true)
  createdAt                      DateTime                        @default(now())
  updatedAt                      DateTime                        @updatedAt
  cancelledAt                    DateTime?
  cancelledById                  String?                         @db.ObjectId
  cancelledBy                    User?                           @relation("cancelledBy", fields: [cancelledById], references: [id])
  decisionDate                   DateTime?
  provisionedDate                DateTime?
  projectId                      String?                         @db.ObjectId
  project                        PrivateCloudProduct?            @relation("project", fields: [projectId], references: [id], onDelete: Cascade)
  decisionDataId                 String                          @db.ObjectId
  decisionData                   PrivateCloudRequestData         @relation("decisionData", fields: [decisionDataId], references: [id])
  requestDataId                  String                          @db.ObjectId
  requestData                    PrivateCloudRequestData         @relation("requestData", fields: [requestDataId], references: [id])
  originalDataId                 String?                         @db.ObjectId
  originalData                   PrivateCloudRequestData?        @relation("originalData", fields: [originalDataId], references: [id])
  quotaUpgradeResourceDetailList QuotaUpgradeResourceDetail[]
  changes                        PrivateCloudRequestDataChanges?
  comments                       PrivateCloudComment[]           @relation("request")
}

type QuotaUpgradeResourceDetail {
  env          Env
  resourceType ResourceType
  allocation   QuotaUpgradeResourceAllocation
  deployment   QuotaUpgradeResourceDeployment
}

type QuotaUpgradeResourceAllocation {
  request Int
  limit   Int
}

type QuotaUpgradeResourceDeployment {
  request Int
  limit   Int
  usage   Int
}

type PrivateCloudRequestDataChanges {
  profileChanged  Boolean?
  contactsChanged Boolean?
  membersChanged  Boolean?
  quotasChanged   Boolean?
  quotasIncrease  Boolean?
  parentPaths     String[]
}

model PrivateCloudProduct {
  id                               String                      @id @default(auto()) @map("_id") @db.ObjectId
  licencePlate                     String                      @unique
  name                             String
  description                      String
  status                           ProjectStatus
  isTest                           Boolean                     @default(false)
  temporaryProductNotificationDate DateTime?
  createdAt                        DateTime                    @default(now())
  updatedAt                        DateTime                    @updatedAt
  archivedAt                       DateTime?
  projectOwnerId                   String                      @db.ObjectId
  projectOwner                     User                        @relation("projectOwner", fields: [projectOwnerId], references: [id])
  primaryTechnicalLeadId           String                      @db.ObjectId
  primaryTechnicalLead             User                        @relation("primaryTechnicalLead", fields: [primaryTechnicalLeadId], references: [id])
  secondaryTechnicalLeadId         String?                     @db.ObjectId
  secondaryTechnicalLead           User?                       @relation("secondaryTechnicalLead", fields: [secondaryTechnicalLeadId], references: [id])
  ministry                         Ministry
  organizationId                   String                      @db.ObjectId
  organization                     Organization                @relation("organization", fields: [organizationId], references: [id])
  cluster                          Cluster
  golddrEnabled                    Boolean                     @default(false)
  resourceRequests                 ResourceRequestsEnv
  supportPhoneNumber               String?
  members                          PrivateCloudProductMember[]
  requests                         PrivateCloudRequest[]       @relation("project")
  comments                         PrivateCloudComment[]       @relation("project")
}

model PrivateCloudRequestData {
  id                       String                      @id @default(auto()) @map("_id") @db.ObjectId
  name                     String
  description              String
  status                   ProjectStatus
  licencePlate             String
  isTest                   Boolean                     @default(false)
  createdAt                DateTime                    @default(now())
  projectOwnerId           String                      @db.ObjectId
  projectOwner             User                        @relation("projectOwner", fields: [projectOwnerId], references: [id])
  primaryTechnicalLeadId   String                      @db.ObjectId
  primaryTechnicalLead     User                        @relation("primaryTechnicalLead", fields: [primaryTechnicalLeadId], references: [id])
  secondaryTechnicalLeadId String?                     @db.ObjectId
  secondaryTechnicalLead   User?                       @relation("secondaryTechnicalLead", fields: [secondaryTechnicalLeadId], references: [id])
  ministry                 Ministry
  organizationId           String                      @db.ObjectId
  organization             Organization                @relation("organization", fields: [organizationId], references: [id])
  cluster                  Cluster
  golddrEnabled            Boolean                     @default(false)
  resourceRequests         ResourceRequestsEnv
  supportPhoneNumber       String?
  members                  PrivateCloudProductMember[]
  decisionRequests         PrivateCloudRequest[]       @relation("decisionData")
  requestRequests          PrivateCloudRequest[]       @relation("requestData")
  originalRequests         PrivateCloudRequest[]       @relation("originalData")
}

model PrivateCloudProductWebhook {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  licencePlate String  @unique
  url          String?
  secret       String?
  username     String?
  password     String?
}

type PrivateCloudProductMember {
  userId String
  roles  PrivateCloudProductMemberRole[]
}

model PrivateCloudComment {
  id        String                @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  text      String
  userId    String                @db.ObjectId
  user      User                  @relation("user", fields: [userId], references: [id])
  projectId String?               @db.ObjectId
  project   PrivateCloudProduct?  @relation("project", fields: [projectId], references: [id])
  requestId String?               @db.ObjectId
  request   PrivateCloudRequest?  @relation("request", fields: [requestId], references: [id])
  replies   PrivateCloudComment[] @relation("parent")
  parentId  String?               @db.ObjectId
  parent    PrivateCloudComment?  @relation("parent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  reactions Reaction[]            @relation("comment")
  pinned    Boolean               @default(false)
}

model Reaction {
  id        String              @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime            @default(now())
  emoji     String
  userId    String              @db.ObjectId
  user      User                @relation("user", fields: [userId], references: [id])
  commentId String              @db.ObjectId
  comment   PrivateCloudComment @relation("comment", fields: [commentId], references: [id])
}

model PrivateCloudUnitPrice {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  cpu       Float
  storage   Float
  date      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PublicCloudRequest {
  id              String                  @id @default(auto()) @map("_id") @db.ObjectId
  licencePlate    String
  createdById     String                  @db.ObjectId
  createdBy       User                    @relation("createdBy", fields: [createdById], references: [id])
  decisionMakerId String?                 @db.ObjectId
  decisionMaker   User?                   @relation("decisionMaker", fields: [decisionMakerId], references: [id])
  type            PublicCloudRequestType
  decisionStatus  DecisionStatus
  actioned        Boolean?                @default(false)
  requestComment  String?
  decisionComment String?
  active          Boolean                 @default(true)
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  cancelledAt     DateTime?
  cancelledById   String?                 @db.ObjectId
  cancelledBy     User?                   @relation("cancelledBy", fields: [cancelledById], references: [id])
  decisionDate    DateTime?
  provisionedDate DateTime?
  projectId       String?                 @db.ObjectId
  project         PublicCloudProduct?     @relation("project", fields: [projectId], references: [id], onDelete: Cascade)
  decisionDataId  String                  @db.ObjectId
  decisionData    PublicCloudRequestData  @relation("decisionData", fields: [decisionDataId], references: [id])
  requestDataId   String                  @db.ObjectId
  requestData     PublicCloudRequestData  @relation("requestData", fields: [requestDataId], references: [id])
  originalDataId  String?                 @db.ObjectId
  originalData    PublicCloudRequestData? @relation("originalData", fields: [originalDataId], references: [id])
  changes         PublicCloudDataChanges?
}

model PublicCloudBilling {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  accountCoding      AccountCoding
  licencePlate       String
  expenseAuthorityId String        @db.ObjectId
  expenseAuthority   User          @relation("expenseAuthority", fields: [expenseAuthorityId], references: [id])
  signed             Boolean       @default(false)
  signedAt           DateTime?
  signedById         String?       @db.ObjectId
  signedBy           User?         @relation("signedBy", fields: [signedById], references: [id])
  approved           Boolean       @default(false)
  approvedAt         DateTime?
  approvedById       String?       @db.ObjectId
  approvedBy         User?         @relation("approvedBy", fields: [approvedById], references: [id])
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
}

type AccountCoding {
  cc   String
  rc   String
  sl   String
  stob String?
  pc   String
}

type PublicCloudDataChanges {
  profileChanged  Boolean?
  contactsChanged Boolean?
  membersChanged  Boolean?
  budgetChanged   Boolean?
  billingChanged  Boolean?
  parentPaths     String[]
}

model PublicCloudProduct {
  id                           String                     @id @default(auto()) @map("_id") @db.ObjectId
  licencePlate                 String                     @unique
  name                         String
  description                  String
  status                       ProjectStatus
  createdAt                    DateTime                   @default(now())
  updatedAt                    DateTime                   @updatedAt
  archivedAt                   DateTime?
  budget                       Budget
  projectOwnerId               String                     @db.ObjectId
  projectOwner                 User                       @relation("projectOwner", fields: [projectOwnerId], references: [id])
  primaryTechnicalLeadId       String                     @db.ObjectId
  primaryTechnicalLead         User                       @relation("primaryTechnicalLead", fields: [primaryTechnicalLeadId], references: [id])
  secondaryTechnicalLeadId     String?                    @db.ObjectId
  secondaryTechnicalLead       User?                      @relation("secondaryTechnicalLead", fields: [secondaryTechnicalLeadId], references: [id])
  expenseAuthorityId           String                     @db.ObjectId
  expenseAuthority             User                       @relation("expenseAuthority", fields: [expenseAuthorityId], references: [id])
  ministry                     Ministry
  organizationId               String                     @db.ObjectId
  organization                 Organization               @relation("organization", fields: [organizationId], references: [id])
  provider                     Provider
  providerSelectionReasons     String[]
  providerSelectionReasonsNote String
  environmentsEnabled          EnvironmentsEnabled
  members                      PublicCloudProductMember[]
  requests                     PublicCloudRequest[]       @relation("project")
}

type PublicCloudProductMember {
  userId String
  roles  PublicCloudProductMemberRole[]
}

model PublicCloudRequestData {
  id                           String                     @id @default(auto()) @map("_id") @db.ObjectId
  licencePlate                 String
  name                         String
  description                  String
  status                       ProjectStatus
  createdAt                    DateTime                   @default(now())
  budget                       Budget
  projectOwnerId               String                     @db.ObjectId
  projectOwner                 User                       @relation("projectOwner", fields: [projectOwnerId], references: [id])
  primaryTechnicalLeadId       String                     @db.ObjectId
  primaryTechnicalLead         User                       @relation("primaryTechnicalLead", fields: [primaryTechnicalLeadId], references: [id])
  secondaryTechnicalLeadId     String?                    @db.ObjectId
  secondaryTechnicalLead       User?                      @relation("secondaryTechnicalLead", fields: [secondaryTechnicalLeadId], references: [id])
  expenseAuthorityId           String                     @db.ObjectId
  expenseAuthority             User                       @relation("expenseAuthority", fields: [expenseAuthorityId], references: [id])
  ministry                     Ministry
  organizationId               String                     @db.ObjectId
  organization                 Organization               @relation("organization", fields: [organizationId], references: [id])
  provider                     Provider
  providerSelectionReasons     String[]
  providerSelectionReasonsNote String
  environmentsEnabled          EnvironmentsEnabled
  members                      PublicCloudProductMember[]
  decisionRequests             PublicCloudRequest[]       @relation("decisionData")
  requestRequests              PublicCloudRequest[]       @relation("requestData")
  originalRequests             PublicCloudRequest[]       @relation("originalData")
}

type EnvironmentsEnabled {
  production  Boolean
  test        Boolean
  development Boolean
  tools       Boolean
}

model Event {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  type      EventType
  userId    String?   @db.ObjectId
  createdAt DateTime  @default(now())
  data      Json
  user      User?     @relation("UserToEvents", fields: [userId], references: [id])
}

model Task {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  type            TaskType
  status          TaskStatus
  userIds         String[]
  roles           String[]
  permissions     String[]
  createdAt       DateTime   @default(now())
  startedAt       DateTime?
  startedBy       String?    @db.ObjectId
  startedByUser   User?      @relation("AssigneeToTasks", fields: [startedBy], references: [id])
  completedAt     DateTime?
  completedBy     String?    @db.ObjectId
  completedByUser User?      @relation("UserToTasks", fields: [completedBy], references: [id])
  data            Json
  closedMetadata  Json?
}

model PrivateCloudProductZapResult {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  licencePlate String
  cluster      String
  host         String
  html         String?
  json         ZapJson?
  available    Boolean?
  scannedAt    DateTime @default(now())
}

type ZapJson {
  site ZapJsonSite[]
}

type ZapJsonSite {
  alerts ZapJsonSiteAlert[]
}

type ZapJsonSiteAlert {
  pluginid   String
  alertRef   String
  alert      String
  name       String
  riskcode   String
  confidence String
  riskdesc   String
  desc       String
  count      String
  solution   String
  otherinfo  String
  reference  String
  cweid      String
  wascid     String
  sourceid   String
}

model SecurityConfig {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  context           ProjectContext
  clusterOrProvider String?
  licencePlate      String         @unique
  repositories      Repository[]
}

enum ProjectContext {
  PRIVATE
  PUBLIC
}

type Repository {
  url String
}

model SonarScanResult {
  id                String                @id @default(auto()) @map("_id") @db.ObjectId
  context           ProjectContext
  clusterOrProvider String?
  licencePlate      String
  url               String
  sha               String
  source            String
  result            SonarScanResultDetail
  scannedAt         DateTime              @default(now())
}

type SonarScanResultDetail {
  repoid                   String
  last_date                String
  bugs                     String
  vulnerabilities          String
  sqale_index              String
  duplicated_lines_density String
  ncloc                    String
  coverage                 String
  code_smells              String
  reliability_rating       String
  security_rating          String
  sqale_rating             String
}

model AcsResult {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  licencePlate String           @unique
  cluster      String
  alerts       AcsResultAlert[]
  images       AcsResultImage[]
  violationUrl String
  imageUrl     String
  scannedAt    DateTime         @default(now())
}

type AcsResultAlert {
  id                String
  lifecycleStage    String
  time              String
  state             String
  enforcementCount  Int
  enforcementAction String
  policy            AcsResultAlertPolicy?
  commonEntityInfo  AcsResultAlertCommonEntityInfo?
  deployment        AcsResultAlertDeployment?
}

type AcsResultAlertPolicy {
  id          String
  name        String
  severity    String
  description String
  categories  String[]
}

type AcsResultAlertCommonEntityInfo {
  clusterId    String
  clusterName  String
  namespaceId  String
  namespace    String
  resourceType String
}

type AcsResultAlertDeployment {
  id          String
  name        String
  clusterId   String
  clusterName String
  namespaceId String
  namespace   String
  inactive    Boolean
}

type AcsResultImage {
  id          String
  name        String
  components  Int?
  cves        Int?
  fixableCves Int?
  createdAt   String?
  lastUpdated String
  priority    String
}

type ResourceRequestsEnv {
  development ResourceRequests
  test        ResourceRequests
  production  ResourceRequests
  tools       ResourceRequests
}

type ResourceRequests {
  cpu     Float
  memory  Float
  storage Float
}

type Budget {
  dev   Float
  test  Float
  prod  Float
  tools Float
}

enum ProjectStatus {
  ACTIVE
  INACTIVE
}

enum DecisionStatus {
  PENDING
  APPROVED
  AUTO_APPROVED
  REJECTED
  PARTIALLY_PROVISIONED
  PROVISIONED
  CANCELLED
}

enum RequestType {
  CREATE
  EDIT
  DELETE
}

enum PublicCloudRequestType {
  CREATE
  EDIT
  DELETE
}

enum Ministry {
  AEST
  AG
  AGRI
  ALC
  BCPC
  CITZ
  DBC
  EAO
  EDUC
  EMCR
  EMPR
  ENV
  FIN
  FLNR
  HLTH
  IRR
  JEDC
  LBR
  HMA
  MCF
  MMHA
  PSA
  PSSG
  SDPR
  TCA
  TRAN
  WLRS
}

// enum CPU {
//   CPU_REQUEST_0_LIMIT_0
//   CPU_REQUEST_0_5_LIMIT_1_5
//   CPU_REQUEST_1_LIMIT_2
//   CPU_REQUEST_2_LIMIT_4
//   CPU_REQUEST_4_LIMIT_8
//   CPU_REQUEST_8_LIMIT_16
//   CPU_REQUEST_16_LIMIT_32
//   CPU_REQUEST_32_LIMIT_64
//   CPU_REQUEST_64_LIMIT_128
// }

// enum Memory {
//   MEMORY_REQUEST_0_LIMIT_0
//   MEMORY_REQUEST_2_LIMIT_4
//   MEMORY_REQUEST_4_LIMIT_8
//   MEMORY_REQUEST_8_LIMIT_16
//   MEMORY_REQUEST_16_LIMIT_32
//   MEMORY_REQUEST_32_LIMIT_64
//   MEMORY_REQUEST_64_LIMIT_128
//   MEMORY_REQUEST_128_LIMIT_256
// }

// enum Storage {
//   STORAGE_0
//   STORAGE_1
//   STORAGE_2
//   STORAGE_4
//   STORAGE_16
//   STORAGE_32
//   STORAGE_64
//   STORAGE_128
//   STORAGE_256
//   STORAGE_512
// }

enum Cluster {
  CLAB
  KLAB
  SILVER
  GOLD
  GOLDDR
  KLAB2
  EMERALD
}

enum Provider {
  // GOOGLE
  AWS
  AWS_LZA
  AZURE
}

enum EventType {
  LOGIN
  LOGOUT
  CREATE_TEAM_API_TOKEN
  UPDATE_TEAM_API_TOKEN
  DELETE_TEAM_API_TOKEN
  CREATE_API_TOKEN
  DELETE_API_TOKEN
  CREATE_PRIVATE_CLOUD_PRODUCT
  UPDATE_PRIVATE_CLOUD_PRODUCT
  DELETE_PRIVATE_CLOUD_PRODUCT
  EXPORT_PRIVATE_CLOUD_PRODUCT
  REVIEW_PRIVATE_CLOUD_REQUEST
  RESEND_PRIVATE_CLOUD_REQUEST
  CANCEL_PRIVATE_CLOUD_REQUEST
  REPROVISION_PRIVATE_CLOUD_PRODUCT
  CREATE_PUBLIC_CLOUD_PRODUCT
  UPDATE_PUBLIC_CLOUD_PRODUCT
  DELETE_PUBLIC_CLOUD_PRODUCT
  EXPORT_PUBLIC_CLOUD_PRODUCT
  REVIEW_PUBLIC_CLOUD_REQUEST
  RESEND_PUBLIC_CLOUD_REQUEST
  CANCEL_PUBLIC_CLOUD_REQUEST
  CREATE_ORGANIZATION
  UPDATE_ORGANIZATION
  DELETE_ORGANIZATION
}

enum TaskType {
  SIGN_PUBLIC_CLOUD_MOU
  REVIEW_PUBLIC_CLOUD_MOU
  REVIEW_PRIVATE_CLOUD_REQUEST
  REVIEW_PUBLIC_CLOUD_REQUEST
}

enum TaskStatus {
  ASSIGNED
  COMPLETED
  CANCELED
  STARTED
}

enum Env {
  development
  test
  production
  tools
}

enum ResourceType {
  cpu
  memory
  storage
}

enum PrivateCloudProductMemberRole {
  EDITOR
  VIEWER
  SUBSCRIBER
}

enum PublicCloudProductMemberRole {
  EDITOR
  VIEWER
  SUBSCRIBER
  BILLING_VIEWER
}

model Organization {
  id                          String                    @id @default(auto()) @map("_id") @db.ObjectId
  code                        String                    @unique
  name                        String
  privateCloudProducts        PrivateCloudProduct[]     @relation("organization")
  privateCloudRequestDataList PrivateCloudRequestData[] @relation("organization")
  publicCloudProducts         PublicCloudProduct[]      @relation("organization")
  publicCloudRequestDataList  PublicCloudRequestData[]  @relation("organization")
}
